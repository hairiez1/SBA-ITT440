#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>
#include <fcntl.h>

#define NUM_CHILDREN 3

void child_interrupt_handler(int sig) {
    printf("Child %d received interrupt message!\n", getpid());
}

int main() {
    int pipes[NUM_CHILDREN][2]; // Array of pipes for communication
    pid_t children[NUM_CHILDREN]; // Array to store child process IDs
    int i;

    // Create pipes
    for (i = 0; i < NUM_CHILDREN; i++) {
        if (pipe(pipes[i]) == -1) {
            perror("Pipe creation failed");
            exit(EXIT_FAILURE);
        }
    }

    // Create child processes
    for (i = 0; i < NUM_CHILDREN; i++) {
        pid_t child_pid = fork();

        if (child_pid == -1) {
            perror("Fork failed");
            exit(EXIT_FAILURE);
        } else if (child_pid == 0) {
            // Child process
            close(pipes[i][1]); // Close write end of the pipe
            signal(SIGINT, child_interrupt_handler); // Set up signal handler for child process

            char message[100];
            ssize_t num_bytes = read(pipes[i][0], message, sizeof(message) - 1);
            if (num_bytes > 0) {
                message[num_bytes] = '\0'; // Null-terminate the message
                printf("Child %d received message from parent: %s\n", getpid(), message);
            }

            close(pipes[i][0]); // Close read end of the pipe
            exit(EXIT_SUCCESS);
        } else {
            // Parent process
            children[i] = child_pid;
        }
    }

    // Parent process
    for (i = 0; i < NUM_CHILDREN; i++) {
        close(pipes[i][0]); // Close read end of the pipe

        char message[100];
        sprintf(message, "Hello from parent! Child %d", i + 1);
        write(pipes[i][1], message, sizeof(message));

        close(pipes[i][1]); // Close write end of the pipe
    }

    // Wait for child processes to finish
    for (i = 0; i < NUM_CHILDREN; i++) {
        waitpid(children[i], NULL, 0);
    }

    return 0;
}
